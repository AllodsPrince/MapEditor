using System;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Windows.Forms;
using Db;
using MapEditor.Resources.Strings;
using Tools.ControlValidators;
using Tools.DBGameObjects.GameObjects;
using Tools.WindowParams;

namespace MapEditor.Forms.Quests.QuickObjectGenerator
{
	// Token: 0x020000AB RID: 171
	public partial class BindExploitToCounterForm : Form
	{
		// Token: 0x060007EE RID: 2030 RVA: 0x0003DFC8 File Offset: 0x0003CFC8
		private void OnSelectDBIDClick(object sender, EventArgs e)
		{
			TextBox textBox;
			DBIDTextValidator validator;
			string filter;
			string folder;
			if (sender == this.InteractiveObjectButton)
			{
				textBox = this.InteractiveObjectTextBox;
				validator = this.interactiveObjValidator;
				filter = string.Format(".xdb files|*.xdb", new object[0]);
				folder = BindExploitToCounterForm.interactiveObjFolder;
			}
			else
			{
				if (sender != this.ItemButton)
				{
					return;
				}
				textBox = this.ItemTextBox;
				validator = this.itemValidator;
				filter = string.Format(".({0}).xdb files|*.({0}).xdb|.xdb files|*.xdb", "ItemResource");
				folder = BindExploitToCounterForm.itemFolder;
			}
			OpenFileDialog openDialog = new OpenFileDialog();
			openDialog.Filter = filter;
			IDatabase mainDb = IDatabase.GetMainDatabase();
			if (!string.IsNullOrEmpty(textBox.Text) && validator.ValidateText(false, true))
			{
				DBID dbid = mainDb.GetDBIDByName(textBox.Text);
				if (!DBID.IsNullOrEmpty(dbid))
				{
					string initDir = dbid.GetFileFolder(EditorEnvironment.DataFolder);
					DirectoryInfo initDirInfo = new DirectoryInfo(initDir);
					if (initDirInfo.Exists)
					{
						openDialog.InitialDirectory = initDirInfo.FullName;
					}
				}
			}
			else if (Directory.Exists(folder))
			{
				string _zone = this.quest.GetZoneFolder();
				string _folder = folder + '\\' + _zone;
				if (Directory.Exists(folder))
				{
					folder = _folder;
				}
				openDialog.InitialDirectory = folder;
			}
			openDialog.RestoreDirectory = true;
			openDialog.Multiselect = false;
			if (openDialog.ShowDialog(this) == DialogResult.OK)
			{
				textBox.Text = openDialog.FileName;
				if (!string.IsNullOrEmpty(textBox.Text))
				{
					validator.ValidateText(true, true);
				}
			}
		}

		// Token: 0x060007EF RID: 2031 RVA: 0x0003E124 File Offset: 0x0003D124
		private IObjMan GetExploit()
		{
			DBID interactiveObjDBID = BindExploitToCounterForm.maindDb.GetDBIDByName(this.InteractiveObjectTextBox.Text);
			if (!DBID.IsNullOrEmpty(interactiveObjDBID))
			{
				IObjMan objMan = BindExploitToCounterForm.maindDb.GetManipulator(interactiveObjDBID);
				if (objMan != null)
				{
					DBID dbid;
					objMan.GetValue("exploit", out dbid);
					if (!DBID.IsNullOrEmpty(dbid))
					{
						return BindExploitToCounterForm.maindDb.GetManipulator(dbid);
					}
				}
			}
			return null;
		}

		// Token: 0x060007F0 RID: 2032 RVA: 0x0003E180 File Offset: 0x0003D180
		private bool CheckValues()
		{
			return this.interactiveObjValidator.ValidateText(true, true) && this.itemValidator.ValidateText();
		}

		// Token: 0x060007F1 RID: 2033 RVA: 0x0003E1A4 File Offset: 0x0003D1A4
		private bool CheckExploit()
		{
			int predicatCnt;
			this.exploitMan.GetValue("casterConditions", out predicatCnt);
			int casterImpactCnt;
			this.exploitMan.GetValue("casterImpacts", out casterImpactCnt);
			if (predicatCnt == 0 && casterImpactCnt == 0)
			{
				return true;
			}
			MessageBox.Show(this, Strings.QUEST_EDITOR_CANT_PROCESS_EXPLOIT, Strings.QUEST_EDITOR_ERROR_TITLE, MessageBoxButtons.OK, MessageBoxIcon.Hand);
			return false;
		}

		// Token: 0x060007F2 RID: 2034 RVA: 0x0003E1F4 File Offset: 0x0003D1F4
		private void OnCreateClick(object sender, EventArgs e)
		{
			if (!this.CheckValues())
			{
				return;
			}
			this.exploitMan = this.GetExploit();
			if (this.exploitMan == null)
			{
				MessageBox.Show(this, string.Format(Strings.QUEST_EDITOR_CANT_FIND_ERROR, "exploit"), Strings.QUEST_EDITOR_ERROR_TITLE, MessageBoxButtons.OK, MessageBoxIcon.Hand);
				return;
			}
			DBID itemDBID = BindExploitToCounterForm.maindDb.GetDBIDByName(this.ItemTextBox.Text);
			if (DBID.IsNullOrEmpty(itemDBID))
			{
				MessageBox.Show(this, string.Format(Strings.QUEST_EDITOR_CANT_FIND_ERROR, "item"), Strings.QUEST_EDITOR_ERROR_TITLE, MessageBoxButtons.OK, MessageBoxIcon.Hand);
				return;
			}
			if (!this.CheckExploit())
			{
				return;
			}
			this.Cursor = Cursors.WaitCursor;
			IObjMan objMan = this.exploitMan.CreateManipulator("casterConditions");
			objMan.Insert(string.Empty, 0, 2, true);
			objMan.SetArrayIndex(0);
			objMan.SetStructPtrInstance(string.Empty, "gameMechanics.elements.predicates.PredicateQuestStatus");
			objMan.SetValue("quest", this.quest.GameObject);
			objMan.SetValue("status", "Started");
			objMan.SetArrayIndex(1);
			objMan.SetStructPtrInstance(string.Empty, "gameMechanics.elements.predicates.PredicateHasItem");
			objMan.SetValue("item", itemDBID);
			objMan = this.exploitMan.CreateManipulator("casterImpacts");
			objMan.Insert(string.Empty, 0, 1, true);
			objMan.SetArrayIndex(0);
			objMan.SetStructPtrInstance(string.Empty, "gameMechanics.elements.impacts.ImpactIncreaseQuestCount");
			objMan.SetValue("id", this.quetsCounter);
			BindExploitToCounterForm.maindDb.SaveChanges();
			this.Cursor = Cursors.Default;
			base.DialogResult = DialogResult.OK;
		}

		// Token: 0x060007F3 RID: 2035 RVA: 0x0003E374 File Offset: 0x0003D374
		public BindExploitToCounterForm(QuestClass _quest, string _counter)
		{
			this.InitializeComponent();
			this.paramsSaver = new FormParamsSaver(this, EditorEnvironment.EditorFormsFolder + "BindExploitToCounterForm.xml", false);
			this.paramsSaver.AutoregisterControls = false;
			this.quest = _quest;
			this.quetsCounter = _counter;
			this.interactiveObjValidator = new DBIDTextValidator("gameMechanics.world.device.DeviceResource", this.InteractiveObjectTextBox, Strings.QUEST_EDITOR_WRONG_TYPE_ERROR, Strings.QUEST_EDITOR_ERROR_TITLE);
			this.itemValidator = new DBIDTextValidator("gameMechanics.constructor.schemes.item.ItemResource", this.ItemTextBox, Strings.QUEST_EDITOR_WRONG_TYPE_ERROR, Strings.QUEST_EDITOR_ERROR_TITLE);
			this.InteractiveObjectButton.Click += this.OnSelectDBIDClick;
			this.ItemButton.Click += this.OnSelectDBIDClick;
			this.CreateButton.Click += this.OnCreateClick;
		}

		// Token: 0x17000145 RID: 325
		// (get) Token: 0x060007F4 RID: 2036 RVA: 0x0003E448 File Offset: 0x0003D448
		public IObjMan ExploitMan
		{
			get
			{
				return this.exploitMan;
			}
		}

		// Token: 0x040005B7 RID: 1463
		private static readonly string interactiveObjFolder = EditorEnvironment.DataFolder.Replace('/', '\\') + "Items\\InteractiveObjects";

		// Token: 0x040005B8 RID: 1464
		private static readonly string itemFolder = EditorEnvironment.DataFolder.Replace('/', '\\') + "Items\\QuestItems";

		// Token: 0x040005B9 RID: 1465
		private static readonly IDatabase maindDb = IDatabase.GetMainDatabase();

		// Token: 0x040005BA RID: 1466
		private readonly FormParamsSaver paramsSaver;

		// Token: 0x040005BB RID: 1467
		private readonly QuestClass quest;

		// Token: 0x040005BC RID: 1468
		private readonly string quetsCounter;

		// Token: 0x040005BD RID: 1469
		private readonly DBIDTextValidator interactiveObjValidator;

		// Token: 0x040005BE RID: 1470
		private readonly DBIDTextValidator itemValidator;

		// Token: 0x040005BF RID: 1471
		private IObjMan exploitMan;
	}
}
